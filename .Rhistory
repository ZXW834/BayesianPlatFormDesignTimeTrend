sce
min(scenario)
(scenario-min(scenario))
scenario
abs(scenario-scenario[1])[-1]
abs(scenario-scenario[1])[-1]>0
sce = (scenario-scenario[1])[-1]!=0
sce
sce = (scenario-scenario[1])[-1]>0
sce
res=matrix(x[,(K-1+2*K+1):(K-1+2*K+K-1)] %in% 1,ncol=K-1)
res
result=rep(NA,K-1)
for (i in 1:(K-1)){
result[i] = res[trtmean.loc[i,1],trtmean.loc[i,2]]
}
result
K
sce
sum(result == sce)
trtmean.loc
res
#Indentify which hypothesis is rejected
reject=which(matrix(x[,(K-1+2*K+1):(K-1+2*K+K-1)] %in% 1,ncol=K-1),1)[,2]
reject
x
matrix(x[,(K-1+2*K+1):(K-1+2*K+K-1)] %in% 1,ncol=K-1)
x[,(K-1+2*K+1):(K-1+2*K+K-1)]
is.na(x[,(K-1+2*K+1):(K-1+2*K+K-1)])
which(is.na(x[,(K-1+2*K+1):(K-1+2*K+K-1)]))
matrix(x[,(K-1+2*K+1):(K-1+2*K+K-1)] %in% NA,ncol=K-1)
which(matrix(x[,(K-1+2*K+1):(K-1+2*K+K-1)] %in% NA,ncol=K-1),1)
na.loc.matrix=which(matrix(x[,(K-1+2*K+1):(K-1+2*K+K-1)] %in% NA,ncol=K-1),1)
dim(na.loc.matrix)
dim(rbind(na.loc.matrix,na.loc.matrix))
x[na.loc.matrix[1,]]
test.data = x[,(K-1+2*K+1):(K-1+2*K+K-1)]
na.loc.matrix=which(matrix(test.data %in% NA,ncol=K-1),1)
na.loc.matrix
test.data[na.loc.matrix[1,]]
na.loc.matrix[1,]
test.data
test.data[na.loc.matrix[1,1],na.loc.matrix[1,2]]
test.data
test.data[na.loc.matrix[1,1]-1,na.loc.matrix[1,2]]
na.loc.matrix=which(matrix(test.data %in% NA,ncol=K-1),1)
check.vec = {}
for (i in 1: dim(na.loc.matrix)[[1]]){
check.vec = test.data[na.loc.matrix[1,1]-1,na.loc.matrix[1,2]] == 0
}
check.vec
na.loc.matrix=which(matrix(test.data %in% NA,ncol=K-1),1)
check.vec = {}
for (i in 1: dim(na.loc.matrix)[[1]]){
check.vec = c(check.vec,test.data[na.loc.matrix[1,1]-1,na.loc.matrix[1,2]] == 0)
}
check.vec
check.vec = {}
for (i in 1: dim(na.loc.matrix)[[1]]){
check.vec = c(check.vec,test.data[na.loc.matrix[i,1]-1,na.loc.matrix[i,2]] == 0)
}
check.vec
isTRUE(check)
isTRUE(check.vec)
anyTRUE(check.vec)
any(check.vec)
any(c(NA,NA,NA))
any(c(FALSE,NA,NA))
any(c(TRUE,NA,NA))
sce = (scenario-scenario[1])[-1]!=0
sce
test.data
test.data[3,2]
test.data[3,2]=1
test.data
na.loc.matrix=which(matrix(test.data %in% NA,ncol=K-1),1)
na.loc.matrix
sce
inferiorarm = (scenario-scenario[1])[-1]<0
inferiorarm
inferiorarm.loc = which((scenario-scenario[1])[-1]<0)
inferiorarm.loc
test.data[,2]
which(test.data[,2]==NA)
which(test.data[,2])
which(is.na(test.data[,2]))
test.data[min(which(is.na(test.data[,2])))-1,2]
for (i in 1:length(inferiorarm.loc)){
if (test.data[min(which(is.na(test.data[,i])))-1,i] == 1){
stop("The data type used a one side test while the input variable is two side.")
}
}
length(inferiorarm.loc)
test.data[min(which(is.na(test.data[,i])))-1,i]
# check if any inferior arm is identified to be inferior for one side test
for (i in 1:length(inferiorarm.loc)){
if (test.data[min(which(is.na(test.data[,inferiorarm.loc[i]])))-1,inferiorarm.loc[i]] == 1){
stop("The data type used a one side test while the input variable is two side.")
}
}
test.data
test.data[,2]=0
test.data
test.data = x[,(K-1+2*K+1):(K-1+2*K+K-1)]
test.data[,2]=0
na.loc.matrix=which(matrix(test.data %in% NA,ncol=K-1),1)
na.loc.matrix
superiorarm.loc = which((scenario-scenario[1])[-1]>0)
inferiorarm.loc = which((scenario-scenario[1])[-1]<0)
superiorarm.loc = which((scenario-scenario[1])[-1]>0)
inferiorarm.loc = which((scenario-scenario[1])[-1]<0)
for (i in 1:length(inferiorarm.loc)){
if (test.data[min(which(is.na(test.data[,inferiorarm.loc[i]])))-1,inferiorarm.loc[i]] == 0){
stop("The data type used a Two side test while the input variable is one side.")
}
}
inferiorarm.loc
min(which(is.na(test.data[,inferiorarm.loc[i]])))-1
test.data
#'
#' @description This function reads in the output matrix of a number of trial replicates to calculate the Family wise error rate or Conjunctive power
#' @param res A list of output matrix of a number of trial replicates
#' @param scenario The true scenario used to generate the res list
#'
#' @return Family wise error rate or Conjunctive power
#' @export
#'
#' @examples
#' \dontrun{conjuncativepower_or_FWER(res)}
conjuncativepower_or_FWER=function(res,scenario,test.type){
K=mean(sapply(res,function(x){
K=sum(stringr::str_detect(colnames(x),"H"))+1
return(K)
}))
hypres=mean(sapply(res,function(x){
stage=dim(x)[1]
resname=colnames(x)
K=sum(stringr::str_detect(colnames(x),"H"))+1
# True scenario construction
if (sum(scenario-min(scenario))>0 & test.type == "Twoside"){
sce = (scenario-scenario[1])[-1]!=0
}
else if (sum(scenario-min(scenario))>0 & test.type == "Oneside"){
sce = (scenario-scenario[1])[-1]>0
}
else{
sce = rep(0,K-1)
}
# # Check whether the data output conflicts the test type. This will lead to error if the hypothesis test data input are all zero under the alternative
# if (test.type == "Twoside"){
#   test.data = x[,(K-1+2*K+1):(K-1+2*K+K-1)]
#   superiorarm.loc = which((scenario-scenario[1])[-1]>0)
#   inferiorarm.loc = which((scenario-scenario[1])[-1]<0)
#   for (i in 1:length(inferiorarm.loc)){
#     if (test.data[min(which(is.na(test.data[,inferiorarm.loc[i]])))-1,inferiorarm.loc[i]] == 0){
#       stop("The data type used a Two side test while the input variable is one side.")
#     }
#   }
#   for (i in 1:length(superiorarm.loc)){
#     if (test.data[min(which(is.na(test.data[,superiorarm.loc[i]])))-1,superiorarm.loc[i]] == 0){
#       stop("The data type used a Two side test while the input variable is one side.")
#     }
#   }
# }
# else if (test.type == "Oneside"){
#   inferiorarm.loc = which((scenario-scenario[1])[-1]<0)
#   test.data = x[,(K-1+2*K+1):(K-1+2*K+K-1)]
#   # check if any inferior arm is identified to be inferior for one side test
#   for (i in 1:length(inferiorarm.loc)){
#     if (test.data[min(which(is.na(test.data[,inferiorarm.loc[i]])))-1,inferiorarm.loc[i]] == 1){
#     stop("The data type used a Two side test while the input variable is one side.")
#     }
#     }
# }
# else{
#   Stop("Input test.type is invalid.")
# }
#Indentify which hypothesis is rejected
reject=which(matrix(x[,(K-1+2*K+1):(K-1+2*K+K-1)] %in% 1,ncol=K-1),1)[,2]
drop.at=which(matrix(x[,(K-1+2*K+1):(K-1+2*K+K-1)] %in% 1,ncol=K-1),1)[,1]
drop.at.all=rep(stage,K-1)
drop.at.all[reject]=drop.at
treatmentindex=seq(1,K-1)
trtmean.loc=cbind(drop.at.all,treatmentindex)
res=matrix(x[,(K-1+2*K+1):(K-1+2*K+K-1)] %in% 1,ncol=K-1)
result=rep(NA,K-1)
for (i in 1:(K-1)){
result[i] = res[trtmean.loc[i,1],trtmean.loc[i,2]]
}
if (sum(result == sce) == (K-1)){
return(1)
}
else{
return(0)
}
}))
if (sum(scenario-min(scenario))>0){
current_scenario = "Alt"
return(hypres)
}
else{
current_scenario = "Null"
return(1-hypres)
}
}
conjuncativepower_or_FWER(result)
#' @param res A list of output matrix of a number of trial replicates
#' @param scenario The true scenario used to generate the res list
#' @param test.type The indicator of whether using one side or two side testing.
#'     Please make sure that the input test.type does not conflicts to the data. Otherwise the conjunctive power calculation is wrong
#'
#' @return Family wise error rate or Conjunctive power
#' @export
#'
#' @examples
#' \dontrun{conjuncativepower_or_FWER(res)}
conjuncativepower_or_FWER=function(res,scenario,test.type){
K=mean(sapply(res,function(x){
K=sum(stringr::str_detect(colnames(x),"H"))+1
return(K)
}))
hypres=mean(sapply(res,function(x){
stage=dim(x)[1]
resname=colnames(x)
K=sum(stringr::str_detect(colnames(x),"H"))+1
# True scenario construction
if (sum(scenario-min(scenario))>0 & test.type == "Twoside"){
sce = (scenario-scenario[1])[-1]!=0
}
else if (sum(scenario-min(scenario))>0 & test.type == "Oneside"){
sce = (scenario-scenario[1])[-1]>0
}
else{
sce = rep(0,K-1)
}
# # Check whether the data output conflicts the test type. This will lead to error if the hypothesis test data input are all zero under the alternative
# if (test.type == "Twoside"){
#   test.data = x[,(K-1+2*K+1):(K-1+2*K+K-1)]
#   superiorarm.loc = which((scenario-scenario[1])[-1]>0)
#   inferiorarm.loc = which((scenario-scenario[1])[-1]<0)
#   for (i in 1:length(inferiorarm.loc)){
#     if (test.data[min(which(is.na(test.data[,inferiorarm.loc[i]])))-1,inferiorarm.loc[i]] == 0){
#       stop("The data type used a Two side test while the input variable is one side.")
#     }
#   }
#   for (i in 1:length(superiorarm.loc)){
#     if (test.data[min(which(is.na(test.data[,superiorarm.loc[i]])))-1,superiorarm.loc[i]] == 0){
#       stop("The data type used a Two side test while the input variable is one side.")
#     }
#   }
# }
# else if (test.type == "Oneside"){
#   inferiorarm.loc = which((scenario-scenario[1])[-1]<0)
#   test.data = x[,(K-1+2*K+1):(K-1+2*K+K-1)]
#   # check if any inferior arm is identified to be inferior for one side test
#   for (i in 1:length(inferiorarm.loc)){
#     if (test.data[min(which(is.na(test.data[,inferiorarm.loc[i]])))-1,inferiorarm.loc[i]] == 1){
#     stop("The data type used a Two side test while the input variable is one side.")
#     }
#     }
# }
# else{
#   Stop("Input test.type is invalid.")
# }
#Indentify which hypothesis is rejected
reject=which(matrix(x[,(K-1+2*K+1):(K-1+2*K+K-1)] %in% 1,ncol=K-1),1)[,2]
drop.at=which(matrix(x[,(K-1+2*K+1):(K-1+2*K+K-1)] %in% 1,ncol=K-1),1)[,1]
drop.at.all=rep(stage,K-1)
drop.at.all[reject]=drop.at
treatmentindex=seq(1,K-1)
trtmean.loc=cbind(drop.at.all,treatmentindex)
res=matrix(x[,(K-1+2*K+1):(K-1+2*K+K-1)] %in% 1,ncol=K-1)
result=rep(NA,K-1)
for (i in 1:(K-1)){
result[i] = res[trtmean.loc[i,1],trtmean.loc[i,2]]
}
if (sum(result == sce) == (K-1)){
return(1)
}
else{
return(0)
}
}))
if (sum(scenario-min(scenario))>0){
current_scenario = "Alt"
return(hypres)
}
else{
current_scenario = "Null"
return(1-hypres)
}
}
conjuncativepower_or_FWER(result,scenario = input.info$response.probs)
conjuncativepower_or_FWER(result,scenario = input.info$response.probs,test.type = "Oneside")
conjuncativepower_or_FWER(result[[1]],scenario = input.info$response.probs,test.type = "Oneside")
stage=dim(x)[1]
resname=colnames(x)
K=sum(stringr::str_detect(colnames(x),"H"))+1
# True scenario construction
if (sum(scenario-min(scenario))>0 & test.type == "Twoside"){
sce = (scenario-scenario[1])[-1]!=0
}
else if (sum(scenario-min(scenario))>0 & test.type == "Oneside"){
sce = (scenario-scenario[1])[-1]>0
}
sce = (scenario-scenario[1])[-1]>0
#   for (i in 1:length(inferiorarm.loc)){
#     if (test.data[min(which(is.na(test.data[,inferiorarm.loc[i]])))-1,inferiorarm.loc[i]] == 1){
#     stop("The data type used a Two side test while the input variable is one side.")
#     }
#     }
# }
# else{
#   Stop("Input test.type is invalid.")
# }
#Indentify which hypothesis is rejected
reject=which(matrix(x[,(K-1+2*K+1):(K-1+2*K+K-1)] %in% 1,ncol=K-1),1)[,2]
drop.at=which(matrix(x[,(K-1+2*K+1):(K-1+2*K+K-1)] %in% 1,ncol=K-1),1)[,1]
drop.at.all=rep(stage,K-1)
drop.at.all[reject]=drop.at
treatmentindex=seq(1,K-1)
trtmean.loc=cbind(drop.at.all,treatmentindex)
res=matrix(x[,(K-1+2*K+1):(K-1+2*K+K-1)] %in% 1,ncol=K-1)
result=rep(NA,K-1)
for (i in 1:(K-1)){
result[i] = res[trtmean.loc[i,1],trtmean.loc[i,2]]
}
sum(result == sce) == (K-1)
return(1)
scenario
sum(scenario-min(scenario)
scenario
scenario
sum(scenario-min(scenario)
)_
sum(scenario-min(scenario))
sum(scenario-scenario[1])
sum(scenario-scenario[1])==0
sum(scenario-scenario[1])
scenario-scenario[1]
(scenario-scenario[1])[-1]
(scenario-scenario[1])[-1]!=0
sum(scenario-min(scenario))>0
ssum(scenario-min(scenario)
sum(c(0.4,0.4,0.2,0.4)-0.2)
c(0.4,0.4,0.2,0.4)-0.2)>0
(c(0.4,0.4,0.2,0.4)-0.2)>0
(c(0.4,0.4,0.2,0.4)-0.4)>0
sum(scenario-scenario[1])>0
scenario
sum(scenario-scenario[1])
max(scenario)-scenario[1]
(max(scenario)-scenario[1])
(max(c(0.4,0.4,0.2,0.4))-c(0.4,0.4,0.2,0.4)[1])
sum(scenario-min(scenario)
)
#' @param res A list of output matrix of a number of trial replicates
#' @param scenario The true scenario used to generate the res list
#' @param test.type The indicator of whether using one side or two side testing.
#'     Please make sure that the input test.type does not conflicts to the data. Otherwise the conjunctive power calculation is wrong
#'
#' @return Family wise error rate or Conjunctive power
#' @export
#'
#' @examples
#' \dontrun{conjuncativepower_or_FWER(res)}
conjuncativepower_or_FWER=function(res,scenario,test.type){
K=mean(sapply(res,function(x){
K=sum(stringr::str_detect(colnames(x),"H"))+1
return(K)
}))
hypres=mean(sapply(res,function(x){
stage=dim(x)[1]
resname=colnames(x)
K=sum(stringr::str_detect(colnames(x),"H"))+1
# True scenario construction
if (sum(scenario-min(scenario))>0 & test.type == "Twoside"){
sce = (scenario-scenario[1])[-1]!=0
}
else if (sum(scenario-min(scenario))>0 & test.type == "Oneside"){
sce = (scenario-scenario[1])[-1]>0
}
else{
sce = rep(0,K-1)
}
# # Check whether the data output conflicts the test type. This will lead to error if the hypothesis test data input are all zero under the alternative
# if (test.type == "Twoside"){
#   test.data = x[,(K-1+2*K+1):(K-1+2*K+K-1)]
#   superiorarm.loc = which((scenario-scenario[1])[-1]>0)
#   inferiorarm.loc = which((scenario-scenario[1])[-1]<0)
#   for (i in 1:length(inferiorarm.loc)){
#     if (test.data[min(which(is.na(test.data[,inferiorarm.loc[i]])))-1,inferiorarm.loc[i]] == 0){
#       stop("The data type used a Two side test while the input variable is one side.")
#     }
#   }
#   for (i in 1:length(superiorarm.loc)){
#     if (test.data[min(which(is.na(test.data[,superiorarm.loc[i]])))-1,superiorarm.loc[i]] == 0){
#       stop("The data type used a Two side test while the input variable is one side.")
#     }
#   }
# }
# else if (test.type == "Oneside"){
#   inferiorarm.loc = which((scenario-scenario[1])[-1]<0)
#   test.data = x[,(K-1+2*K+1):(K-1+2*K+K-1)]
#   # check if any inferior arm is identified to be inferior for one side test
#   for (i in 1:length(inferiorarm.loc)){
#     if (test.data[min(which(is.na(test.data[,inferiorarm.loc[i]])))-1,inferiorarm.loc[i]] == 1){
#     stop("The data type used a Two side test while the input variable is one side.")
#     }
#     }
# }
# else{
#   Stop("Input test.type is invalid.")
# }
#Indentify which hypothesis is rejected
reject=which(matrix(x[,(K-1+2*K+1):(K-1+2*K+K-1)] %in% 1,ncol=K-1),1)[,2]
drop.at=which(matrix(x[,(K-1+2*K+1):(K-1+2*K+K-1)] %in% 1,ncol=K-1),1)[,1]
drop.at.all=rep(stage,K-1)
drop.at.all[reject]=drop.at
treatmentindex=seq(1,K-1)
trtmean.loc=cbind(drop.at.all,treatmentindex)
res=matrix(x[,(K-1+2*K+1):(K-1+2*K+K-1)] %in% 1,ncol=K-1)
result=rep(NA,K-1)
for (i in 1:(K-1)){
result[i] = res[trtmean.loc[i,1],trtmean.loc[i,2]]
}
if (sum(result == sce) == (K-1)){
return(1)
}
else{
return(0)
}
}))
if (test.type == "Twoside"){
if (sum(scenario-min(scenario))>0){
current_scenario = "Alt"
return(hypres)
}
else{
current_scenario = "Null"
return(1-hypres)
}
}
else{
if ((max(scenario)-scenario[1]) <= 0){
current_scenario = "Null"
return(1-hypres)
}
else{
current_scenario = "Alt"
return(hypres)
}
}
}
conjuncativepower_or_FWER(result[[1]],scenario = input.info$response.probs,test.type = "Oneside")
conjuncativepower_or_FWER(result[[1]],scenario = input.info$response.probs,test.type = "Twoside")
debug(conjuncativepower_or_FWER)
conjuncativepower_or_FWER(result[[1]],scenario = input.info$response.probs,test.type = "Twoside")
conjuncativepower_or_FWER(result[[1]],scenario = input.info$response.probs,test.type = "Twoside")
force(res)
force(scenario)
force(test.type)
conjuncativepower_or_FWER(result,scenario = input.info$response.probs,test.type = "Twoside")
force(res)
result
registerDoParallel(cores = 4)
result = foreach(icount(40)) %dopar% trial.fun(
response.probs = input.info$response.probs,
test.type = input.info$test.type,
ns = input.info$ns,
max.ar = input.info$max.ar,
rand.algo = input.info$rand.algo,
max.deviation = input.info$max.deviation,
model.inf = input.info$model.inf,
Stopbound.inf = input.info$Stopbound.inf,
Random.inf = input.info$Random.inf,
trend.inf = input.info$trend.inf
)
conjuncativepower_or_FWER(result,scenario = input.info$response.probs,test.type = "Twoside")
conjuncativepower_or_FWER(result,scenario = input.info$response.probs,test.type = "Oneside")
disconjunctivepowerfunc(result)
perHtypeIerror_marginalpowerfunc(result)
result
roxygen2::roxygenise()
remove.packages("BayesianPlatformDesignTimeTrend")
roxygen2::roxygenise()
roxygen2::roxygenise()
include_graphics("./man/figures/Asymmetricscreening.png")
?include_graphics
knitr::include_graphics("./man/figures/Asymmetricscreening.png")
knitr::include_graphics("./man/figures/Trippascreening.png")
knitr::include_graphics("./man/figures/Designevaluation.png")
devtools::build_readme()
roxygen2::roxygenise()
devtools::build_readme()
roxygen2::roxygenise()
?knitr::include_graphics
devtools::build_readme()
devtools::build_readme()
roxygen2::roxygenise()
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
$stdout
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
