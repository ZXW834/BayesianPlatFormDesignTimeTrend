stats7 = analysis$stats7
sampoutcome = analysis$sampoutcome
sampefftotal = analysis$sampefftotal
post.prob.btcontrol = analysis$post.prob.btcontrol
colMeans(inv.logit(sampefftotal))
postsamp.list = Mixeffect_modelling(ytemp=ytemp, treatmentindex=treatmentindex, group=group, ntemp=ntemp, armleft=armleft, jagmodel=jagmodel)
analysis = Mixeffect_analysis(postsamp.list=postsamp.list, group=group, treatmentindex=treatmentindex, ns = ns, K = K)
stats1 = analysis$stats1
statsbeta0 = analysis$statsbeta0
stats4 = analysis$stats4
stats5 = analysis$stats5
stats6 = analysis$stats6
stats7 = analysis$stats7
sampoutcome = analysis$sampoutcome
sampefftotal = analysis$sampefftotal
post.prob.btcontrol = analysis$post.prob.btcontrol
colMeans(inv.logit(sampefftotal))
postsamp.list = Mixeffect_modelling(ytemp=ytemp, treatmentindex=treatmentindex, group=group, ntemp=ntemp, armleft=armleft, jagmodel=jagmodel)
analysis = Mixeffect_analysis(postsamp.list=postsamp.list, group=group, treatmentindex=treatmentindex, ns = ns, K = K)
stats1 = analysis$stats1
statsbeta0 = analysis$statsbeta0
stats4 = analysis$stats4
stats5 = analysis$stats5
stats6 = analysis$stats6
stats7 = analysis$stats7
sampoutcome = analysis$sampoutcome
sampefftotal = analysis$sampefftotal
post.prob.btcontrol = analysis$post.prob.btcontrol
colMeans(inv.logit(sampefftotal))
postsamp.list = Mixeffect_modelling(ytemp=ytemp, treatmentindex=treatmentindex, group=group, ntemp=ntemp, armleft=armleft, jagmodel=jagmodel)
analysis = Mixeffect_analysis(postsamp.list=postsamp.list, group=group, treatmentindex=treatmentindex, ns = ns, K = K)
stats1 = analysis$stats1
statsbeta0 = analysis$statsbeta0
stats4 = analysis$stats4
stats5 = analysis$stats5
stats6 = analysis$stats6
stats7 = analysis$stats7
sampoutcome = analysis$sampoutcome
sampefftotal = analysis$sampefftotal
post.prob.btcontrol = analysis$post.prob.btcontrol
colMeans(inv.logit(sampefftotal))
postsamp.list = Mixeffect_modelling(ytemp=ytemp, treatmentindex=treatmentindex, group=group, ntemp=ntemp, armleft=armleft, jagmodel=jagmodel)
analysis = Mixeffect_analysis(postsamp.list=postsamp.list, group=group, treatmentindex=treatmentindex, ns = ns, K = K)
stats1 = analysis$stats1
statsbeta0 = analysis$statsbeta0
stats4 = analysis$stats4
stats5 = analysis$stats5
stats6 = analysis$stats6
stats7 = analysis$stats7
sampoutcome = analysis$sampoutcome
sampefftotal = analysis$sampefftotal
post.prob.btcontrol = analysis$post.prob.btcontrol
colMeans(inv.logit(sampefftotal))
postsamp.list = Mixeffect_modelling(ytemp=ytemp, treatmentindex=treatmentindex, group=group, ntemp=ntemp, armleft=armleft, jagmodel=jagmodel)
analysis = Mixeffect_analysis(postsamp.list=postsamp.list, group=group, treatmentindex=treatmentindex, ns = ns, K = K)
stats1 = analysis$stats1
statsbeta0 = analysis$statsbeta0
stats4 = analysis$stats4
stats5 = analysis$stats5
stats6 = analysis$stats6
stats7 = analysis$stats7
sampoutcome = analysis$sampoutcome
sampefftotal = analysis$sampefftotal
post.prob.btcontrol = analysis$post.prob.btcontrol
colMeans(inv.logit(sampefftotal))
postsamp.list = Mixeffect_modelling(ytemp=ytemp, treatmentindex=treatmentindex, group=group, ntemp=ntemp, armleft=armleft, jagmodel=jagmodel)
analysis = Mixeffect_analysis(postsamp.list=postsamp.list, group=group, treatmentindex=treatmentindex, ns = ns, K = K)
stats1 = analysis$stats1
statsbeta0 = analysis$statsbeta0
stats4 = analysis$stats4
stats5 = analysis$stats5
stats6 = analysis$stats6
stats7 = analysis$stats7
sampoutcome = analysis$sampoutcome
sampefftotal = analysis$sampefftotal
post.prob.btcontrol = analysis$post.prob.btcontrol
colMeans(inv.logit(sampefftotal))
postsamp.list = Mixeffect_modelling(ytemp=ytemp, treatmentindex=treatmentindex, group=group, ntemp=ntemp, armleft=armleft, jagmodel=jagmodel)
analysis = Mixeffect_analysis(postsamp.list=postsamp.list, group=group, treatmentindex=treatmentindex, ns = ns, K = K)
stats1 = analysis$stats1
statsbeta0 = analysis$statsbeta0
stats4 = analysis$stats4
stats5 = analysis$stats5
stats6 = analysis$stats6
stats7 = analysis$stats7
sampoutcome = analysis$sampoutcome
sampefftotal = analysis$sampefftotal
post.prob.btcontrol = analysis$post.prob.btcontrol
colMeans(inv.logit(sampefftotal))
postsamp.list = Mixeffect_modelling(ytemp=ytemp, treatmentindex=treatmentindex, group=group, ntemp=ntemp, armleft=armleft, jagmodel=jagmodel)
analysis = Mixeffect_analysis(postsamp.list=postsamp.list, group=group, treatmentindex=treatmentindex, ns = ns, K = K)
stats1 = analysis$stats1
statsbeta0 = analysis$statsbeta0
stats4 = analysis$stats4
stats5 = analysis$stats5
stats6 = analysis$stats6
stats7 = analysis$stats7
sampoutcome = analysis$sampoutcome
sampefftotal = analysis$sampefftotal
post.prob.btcontrol = analysis$post.prob.btcontrol
colMeans(inv.logit(sampefftotal))
postsamp.list = Mixeffect_modelling(ytemp=ytemp, treatmentindex=treatmentindex, group=group, ntemp=ntemp, armleft=armleft, jagmodel=jagmodel)
analysis = Mixeffect_analysis(postsamp.list=postsamp.list, group=group, treatmentindex=treatmentindex, ns = ns, K = K)
stats1 = analysis$stats1
statsbeta0 = analysis$statsbeta0
stats4 = analysis$stats4
stats5 = analysis$stats5
stats6 = analysis$stats6
stats7 = analysis$stats7
sampoutcome = analysis$sampoutcome
sampefftotal = analysis$sampefftotal
post.prob.btcontrol = analysis$post.prob.btcontrol
colMeans(inv.logit(sampefftotal))
postsamp.list = Mixeffect_modelling(ytemp=ytemp, treatmentindex=treatmentindex, group=group, ntemp=ntemp, armleft=armleft, jagmodel=jagmodel)
analysis = Mixeffect_analysis(postsamp.list=postsamp.list, group=group, treatmentindex=treatmentindex, ns = ns, K = K)
stats1 = analysis$stats1
statsbeta0 = analysis$statsbeta0
stats4 = analysis$stats4
stats5 = analysis$stats5
stats6 = analysis$stats6
stats7 = analysis$stats7
sampoutcome = analysis$sampoutcome
sampefftotal = analysis$sampefftotal
post.prob.btcontrol = analysis$post.prob.btcontrol
colMeans(inv.logit(sampefftotal))
postsamp.list = Mixeffect_modelling(ytemp=ytemp, treatmentindex=treatmentindex, group=group, ntemp=ntemp, armleft=armleft, jagmodel=jagmodel)
analysis = Mixeffect_analysis(postsamp.list=postsamp.list, group=group, treatmentindex=treatmentindex, ns = ns, K = K)
stats1 = analysis$stats1
statsbeta0 = analysis$statsbeta0
stats4 = analysis$stats4
stats5 = analysis$stats5
stats6 = analysis$stats6
stats7 = analysis$stats7
sampoutcome = analysis$sampoutcome
sampefftotal = analysis$sampefftotal
post.prob.btcontrol = analysis$post.prob.btcontrol
colMeans(inv.logit(sampefftotal))
model1=stan_model("randomeffect1.stan")
out=rstan::sampling(model,data=dataran,chain=1,refresh=FALSE)
sample=extract(out)
colMeans(inv.logit(sample$beta_0+sample$beta))
out=rstan::sampling(model,data=dataran,chain=1,refresh=FALSE)
View(dataran)
load("~/Downloads/tempdata.RData")
postsamp.list = Mixeffect_modelling(ytemp=ytemp, treatmentindex=treatmentindex, group=group, ntemp=ntemp, armleft=armleft, jagmodel=jagmodel)
analysis = Mixeffect_analysis(postsamp.list=postsamp.list, group=group, treatmentindex=treatmentindex, ns = ns, K = K)
stats1 = analysis$stats1
statsbeta0 = analysis$statsbeta0
stats4 = analysis$stats4
stats5 = analysis$stats5
stats6 = analysis$stats6
stats7 = analysis$stats7
sampoutcome = analysis$sampoutcome
sampefftotal = analysis$sampefftotal
post.prob.btcontrol = analysis$post.prob.btcontrol
colMeans(inv.logit(sampefftotal))
postsamp.list = Mixeffect_modelling(ytemp=ytemp, treatmentindex=treatmentindex, group=group, ntemp=ntemp, armleft=armleft, jagmodel=jagmodel)
analysis = Mixeffect_analysis(postsamp.list=postsamp.list, group=group, treatmentindex=treatmentindex, ns = ns, K = K)
stats1 = analysis$stats1
statsbeta0 = analysis$statsbeta0
stats4 = analysis$stats4
stats5 = analysis$stats5
stats6 = analysis$stats6
stats7 = analysis$stats7
sampoutcome = analysis$sampoutcome
sampefftotal = analysis$sampefftotal
post.prob.btcontrol = analysis$post.prob.btcontrol
colMeans(inv.logit(sampefftotal))
postsamp.list = Mixeffect_modelling(ytemp=ytemp, treatmentindex=treatmentindex, group=group, ntemp=ntemp, armleft=armleft, jagmodel=jagmodel)
analysis = Mixeffect_analysis(postsamp.list=postsamp.list, group=group, treatmentindex=treatmentindex, ns = ns, K = K)
stats1 = analysis$stats1
statsbeta0 = analysis$statsbeta0
stats4 = analysis$stats4
stats5 = analysis$stats5
stats6 = analysis$stats6
stats7 = analysis$stats7
sampoutcome = analysis$sampoutcome
sampefftotal = analysis$sampefftotal
post.prob.btcontrol = analysis$post.prob.btcontrol
colMeans(inv.logit(sampefftotal))
out=rstan::sampling(model,data=dataran,chain=1,refresh=FALSE)
dataran$J=dataran$groupmax
dataran$y=dataran$Y
dataran$x=dataran$z
out=rstan::sampling(model,data=dataran,chain=1,refresh=FALSE)
out=rstan::sampling(model,data=dataran,chain=1,refresh=FALSE)
sample=extract(out)
colMeans(inv.logit(sample$beta_0+sample$beta))
sample
sample$beta_0
sample$beta
c(colMeans(inv.logit(sample$beta_0+sample$beta[,1]),colMeans(inv.logit(sample$beta_0+sample$beta[,2]))
|)
out=rstan::sampling(model,data=dataran,chain=1,refresh=FALSE)
sample=extract(out)
c(colMeans(inv.logit(sample$beta_0+sample$beta[,1])),colMeans(inv.logit(sample$beta_0+sample$beta[,2])))
sample$beta_0+sample$beta[,1]
ut=rstan::sampling(model,data=dataran,chain=1,refresh=FALSE)
sample=extract(out)
c(mean(inv.logit(sample$beta_0+sample$beta[,1])),mean(inv.logit(sample$beta_0+sample$beta[,2])))
out=rstan::sampling(model,data=dataran,chain=1,refresh=FALSE)
sample=extract(out)
c(mean(inv.logit(sample$beta_0+sample$beta[,1])),mean(inv.logit(sample$beta_0+sample$beta[,2])))
out=rstan::sampling(model,data=dataran,chain=1,refresh=FALSE)
sample=extract(out)
c(mean(inv.logit(sample$beta_0+sample$beta[,1])),mean(inv.logit(sample$beta_0+sample$beta[,2])))
out=rstan::sampling(model,data=dataran,chain=1,refresh=FALSE)
sample=extract(out)
c(mean(inv.logit(sample$beta_0+sample$beta[,1])),mean(inv.logit(sample$beta_0+sample$beta[,2])))
colMeans(sample$beta)
out=rstan::sampling(model1,data=dataran,chain=1,refresh=FALSE)
sample=extract(out)
model1=stan_model("randomeffect1.stan")
dataran$Xt=dataran$X[,2]
out=rstan::sampling(model1,data=dataran,chain=1,refresh=FALSE)
sample=extract(out)
out=rstan::sampling(model1,data=dataran,chain=1,refresh=FALSE)
(dataran$Xt=matrix(dataran$X[,2],ncol=1)
dataran$Xt=matrix(dataran$X[,2],ncol=1)
out=rstan::sampling(model1,data=dataran,chain=1,refresh=FALSE)
sample=extract(out)
c(mean(inv.logit(sample$beta_0+sample$beta[,1])),mean(inv.logit(sample$beta_0+sample$beta[,2])))
c(mean(inv.logit(sample$beta0+)),mean(inv.logit(sample$beta0+sample$beta1[,1])))
mean(inv.logit(sample$beta0+sample$beta1[,1]))
mean(inv.logit(sample$beta0+))
c(mean(inv.logit(sample$beta0)),mean(inv.logit(sample$beta0+sample$beta1[,1])))
c(mean(inv.logit(sample$beta0)),mean(inv.logit(sample$beta0+sample$beta1[,1])))
c(mean(inv.logit(sample$beta0)),mean(inv.logit(sample$beta0+sample$beta1[,1])))
c(mean(inv.logit(sample$beta0)),mean(inv.logit(sample$beta0+sample$beta1[,1])))
c(mean(inv.logit(sample$beta0)),mean(inv.logit(sample$beta0+sample$beta1[,1])))
out=rstan::sampling(model1,data=dataran,chain=1,refresh=FALSE)
sample=extract(out)
c(mean(inv.logit(sample$beta0)),mean(inv.logit(sample$beta0+sample$beta1[,1])))
out=rstan::sampling(model1,data=dataran,chain=1,refresh=FALSE)
sample=extract(out)
c(mean(inv.logit(sample$beta0)),mean(inv.logit(sample$beta0+sample$beta1[,1])))
setwd("~/Downloads/BayesianPlatformDesignTimeTrend/inst/stan")
model3=stan_model("randomeffect.stan")
pp=mean(sample$beta1[,1]>0)
pp
out=rstan::sampling(model2,data=dataran,chain=1,refresh=FALSE)
out=rstan::sampling(model3,data=dataran,chain=1,refresh=FALSE)
sample=extract(out)
sample
sample$beta1
mean(sample$beta1[,1]>0)
c(mean(inv.logit(sample$beta0)),mean(inv.logit(sample$beta0+sample$beta1[,1])))
sample=extract(out)
c(mean(inv.logit(sample$beta0)),mean(inv.logit(sample$beta0+sample$beta1[,1])))
inv.logit(sample$beta0))
mean(inv.logit(sample$beta0))
sample$beta1[,1]
pp=mean(sample$beta1[,1]>0)
pp
plot(density(inv.logit(sample$beta0)))
lines(density(inv.logit(sample$beta0+sample$beta1[,1])))
rpp1={}
ppc1={}
ppc2={}
ppc3={}
rpp1={}
rpp2={}
rpp3={}
for(i in 1:1000){
set.seed(i)
out=rstan::sampling(model,data=dataran,chain=1,refresh=FALSE)
sample=extract(out)
rp1=c(mean(inv.logit(sample$beta_0+sample$beta[,1])),mean(inv.logit(sample$beta_0+sample$beta[,2])))
pp=mean(sample$beta_0+sample$beta[,1]>sample$beta_0+sample$beta[,2])
ppc1=c(ppc1,pp)
rpp1=rbind(rpp1,rp1)
out=rstan::sampling(model1,data=dataran,chain=1,refresh=FALSE)
sample=extract(out)
rp2=c(mean(inv.logit(sample$beta0)),mean(inv.logit(sample$beta0+sample$beta1[,1])))
pp=mean(sample$beta1[,1]>0)
ppc2=c(ppc2,pp)
rpp2=rbind(rpp2,rp2)
out=rstan::sampling(model3,data=dataran,chain=1,refresh=FALSE)
sample=extract(out)
rp3=c(mean(inv.logit(sample$beta0)),mean(inv.logit(sample$beta0+sample$beta1[,1])))
pp=mean(sample$beta1[,1]>0)
ppc3=c(ppc3,pp)
rpp3=rbind(rpp3,rp3)
}
ppc1
ppc2
ppc3
rpp1
colMeans(rpp1)
colMeans(rpp2)
colMeans(rpp3)
ppc1={}
ppc2={}
ppc3={}
rpp1={}
rpp2={}
rpp3={}
for(i in 1:1000){
set.seed(i)
print(i)
out=rstan::sampling(model,data=dataran,chain=1,refresh=FALSE)
sample=extract(out)
rp1=c(mean(inv.logit(sample$beta_0+sample$beta[,1])),mean(inv.logit(sample$beta_0+sample$beta[,2])))
pp=mean(sample$beta_0+sample$beta[,1]>sample$beta_0+sample$beta[,2])
ppc1=c(ppc1,pp)
rpp1=rbind(rpp1,rp1)
out=rstan::sampling(model1,data=dataran,chain=1,refresh=FALSE)
sample=extract(out)
rp2=c(mean(inv.logit(sample$beta0)),mean(inv.logit(sample$beta0+sample$beta1[,1])))
pp=mean(sample$beta1[,1]>0)
ppc2=c(ppc2,pp)
rpp2=rbind(rpp2,rp2)
out=rstan::sampling(model3,data=dataran,chain=1,refresh=FALSE)
sample=extract(out)
rp3=c(mean(inv.logit(sample$beta0)),mean(inv.logit(sample$beta0+sample$beta1[,1])))
pp=mean(sample$beta1[,1]>0)
ppc3=c(ppc3,pp)
rpp3=rbind(rpp3,rp3)
}
warnings()
ppc1
mean(ppc1)
mean(ppc2)
mean(ppc3)
1-mean(ppc1)
hist(ppc1)
hist(1-ppc1)
hist(ppc2)
hist(ppc3)
plot(density(ppc3))
lines(density(ppc2))
lines(density(1-ppc1))
postsamp.list = Mixeffect_modelling(ytemp=ytemp, treatmentindex=treatmentindex, group=group, ntemp=ntemp, armleft=armleft, jagmodel=jagmodel)
rp4={}
ppc4={}
for (i in 1:1000){
set.seed(i)
print(i)
postsamp.list = Mixeffect_modelling(ytemp=ytemp, treatmentindex=treatmentindex, group=group, ntemp=ntemp, armleft=armleft, jagmodel=jagmodel)
analysis = Mixeffect_analysis(postsamp.list=postsamp.list, group=group, treatmentindex=treatmentindex, ns = ns, K = K)
stats1 = analysis$stats1
sampefftotal = analysis$sampefftotal
post.prob.btcontrol = analysis$post.prob.btcontrol
rpp4=rbind(rpp4,inv.logit(post.prob.btcontrol))
ppc4=c(ppc4,post.prob.btcontrol)
}
set.seed(i)
print(i)
postsamp.list = Mixeffect_modelling(ytemp=ytemp, treatmentindex=treatmentindex, group=group, ntemp=ntemp, armleft=armleft, jagmodel=jagmodel)
analysis = Mixeffect_analysis(postsamp.list=postsamp.list, group=group, treatmentindex=treatmentindex, ns = ns, K = K)
stats1 = analysis$stats1
sampefftotal = analysis$sampefftotal
post.prob.btcontrol = analysis$post.prob.btcontrol
pp4=rbind(pp4,inv.logit(post.prob.btcontrol))
pp4={}
pp4=rbind(pp4,inv.logit(post.prob.btcontrol))
pp4
pp4={}
pp4=rbind(pp4,inv.logit(sampefftotal))
pp4
pp4={}
pp4=rbind(pp4,colMeans(inv.logit(sampefftotal)))
pp4
pp4={}
ppc4={}
for (i in 1:1000){
set.seed(i)
print(i)
postsamp.list = Mixeffect_modelling(ytemp=ytemp, treatmentindex=treatmentindex, group=group, ntemp=ntemp, armleft=armleft, jagmodel=jagmodel)
analysis = Mixeffect_analysis(postsamp.list=postsamp.list, group=group, treatmentindex=treatmentindex, ns = ns, K = K)
stats1 = analysis$stats1
sampefftotal = analysis$sampefftotal
post.prob.btcontrol = analysis$post.prob.btcontrol
pp4=rbind(pp4,colMeans(inv.logit(sampefftotal)))
ppc4=c(ppc4,post.prob.btcontrol)
}
pp4
ppc4
postsamp.list = Mixeffect_modelling(ytemp=ytemp, treatmentindex=treatmentindex, group=group, ntemp=ntemp, armleft=armleft, jagmodel=jagmodel)
analysis = Mixeffect_analysis(postsamp.list=postsamp.list, group=group, treatmentindex=treatmentindex, ns = ns, K = K)
stats1 = analysis$stats1
sampefftotal = analysis$sampefftotal
sampefftotal
colMeans(inv.logit(sampefftotal))
postsamp.list = Mixeffect_modelling(ytemp=ytemp, treatmentindex=treatmentindex, group=group, ntemp=ntemp, armleft=armleft, jagmodel=jagmodel)
analysis = Mixeffect_analysis(postsamp.list=postsamp.list, group=group, treatmentindex=treatmentindex, ns = ns, K = K)
stats1 = analysis$stats1
sampefftotal = analysis$sampefftotal
colMeans(inv.logit(sampefftotal))
View(pp4)
colMeans(pp4)
plot(density(pp3))
plot(density(rpp3))
lines(density(rpp4))
lines(density(rpp2))
plot(density(rpp2))
lines(density(rpp3))
plot(density(rpp2),xlim=c(0,1))
lines(density(rpp3))
lines(density(rpp1))
plot(density(rpp2),xlim=c(0,1))
lines(density(rpp1))
lines(density(rpp3))
lines(density(pp1))
lines(density(ppc1))
plot(density(ppc1))
ppc2
plot(density(ppc1))
plot(density(ppc1),xlim=c(0,1))
lines(density(ppc2))
plot(density(1-ppc1),xlim=c(0,1))
lines(density(ppc2))
lines(density(ppc3))
lines(density(ppc4))
mean(ppc2)
mean(ppc4)
colMeans(pp4)
colMeans(rpp1)
colMeans(rpp2)
colMeans(rpp3)
colMeans(rpp4)
7/90
8/90
#' @importFrom stats lm
#' @importFrom stats pbeta
#' @export
#'
#' @examples
#' n <- c(20,20,20,20)
#' y <- c(12,12,12,6)
#' ibetabinomial.post(n, y, pi.star = 0.5, pess = 2)
#' #[1] 0.5000000 0.5000000 0.0308018
#'
ibetabinomial.post = function(n, y, pi.star = 0.5, pess = 2) {
#First element of n and y are from control
K = length(n)
# Posterior Probability of each arm better than the same control arm
# See https://www.evanmiller.org/bayesian-ab-testing.html#cite1
# Treatment_k~beta(a_k,b_k), Control~beta(a_1,b_1)
# p.prior*ess.prior: prior success
# (1-p.prior)*ess.prior: prior failure
post.prob = {
}
for (k in 2:K) {
post.prob[k - 1] <- unlist(integrate(
function(x)
pbeta(x, y[k] + pi.star * pess, (n[k] - y[k]) + (1 - pi.star) * pess, lower.tail =
FALSE) * dbeta(x, y[1] + pi.star * pess, (n[1] - y[1]) + (1 - pi.star) *
pess),
lower = 0,
upper = 1
))$value
names(post.prob[k - 1]) = paste("Treatment", k - 1, "vs", "Control", sep = " ")
}
#Slower version
# # p.prior*ess.prior: prior success
# # (1-p.prior)*ess.prior: prior failure
# narm=length(n)
# rn=matrix(rbeta(random.number*narm,
#                 y+p.prior*ess.prior,
#                 n-y+(1-p.prior)*ess.prior),
#           random.number, byrow = TRUE)
#
# controlrn=rn[,1]
# treatmentrn=as.matrix(rn[,-1])
#
# # rnT=rbeta(random.number,y[1]+p.prior*ess.prior,n[1]-y[1]+(1-p.prior)*ess.prior)
# # rnC=rbeta(random.number,y[2]+p.prior*ess.prior,n[2]-y[2]+(1-p.prior)*ess.prior)
# # postprob<-mean(rnT>rnC)
#
# post.prob=colMeans(treatmentrn>controlrn)
return(post.prob)
}
n=c(90,90)
y=c(7,8)
ibetabinomial.post()
ibetabinomial.post(n=n,y=y)
load("~/Downloads/tempdata.RData")
View(dataran)
dataran$x=dataran$z
dataran$y=dataran$Y
setwd("~/Downloads")
model=stan_model("randomeffect.stan")
library(rstan)
model=stan_model("randomeffect.stan")
dataran$X=dataran$z
View(dataran)
roxygen2::roxygenize()
setwd("~/Downloads/BayesianPlatformDesignTimeTrend")
setwd("~/Downloads/BayesianPlatformDesignTimeTrend")
roxygen2::roxygenize()
library(BayesianPlatformDesignTimeTrend)
View(stan.logisticmodeltrans)
force(Meanfunc)
stan_model()
remove.packages("PlatFormDesignTimeTrend")
remove.packages("BayesianPlatformDesignTimeTrend")
roxygen2::roxygenize()
roxygen2::roxygenize()
devtools::document()
roxygen2::roxygenize()
install.packages("rstantools")
install.packages("rstantools")
library(rstantools)
rstantools::rstan_create_package("/Downloads","temppackage")
rstantools::rstan_create_package("Downloads","temppackage")
setwd("~/Downloads")
rstantools::rstan_create_package("temppackage")
setwd("~/Downloads/BayesianPlatformDesignTimeTrend")
roxygen2::roxygenize()
library(rstantools)
roxygen2::roxygenize()
