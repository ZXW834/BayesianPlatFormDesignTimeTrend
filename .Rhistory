upper = 1
))$value
names(post.prob[k - 1]) = paste("Treatment", k - 1, "vs", "Control", sep = " ")
}
#Slower version
# # p.prior*ess.prior: prior success
# # (1-p.prior)*ess.prior: prior failure
# narm=length(n)
# rn=matrix(rbeta(random.number*narm,
#                 y+p.prior*ess.prior,
#                 n-y+(1-p.prior)*ess.prior),
#           random.number, byrow = TRUE)
#
# controlrn=rn[,1]
# treatmentrn=as.matrix(rn[,-1])
#
# # rnT=rbeta(random.number,y[1]+p.prior*ess.prior,n[1]-y[1]+(1-p.prior)*ess.prior)
# # rnC=rbeta(random.number,y[2]+p.prior*ess.prior,n[2]-y[2]+(1-p.prior)*ess.prior)
# # postprob<-mean(rnT>rnC)
#
# post.prob=colMeans(treatmentrn>controlrn)
return(post.prob)
}
n=c(90,90)
y=c(7,8)
ibetabinomial.post()
ibetabinomial.post(n=n,y=y)
load("~/Downloads/tempdata.RData")
View(dataran)
dataran$x=dataran$z
dataran$y=dataran$Y
setwd("~/Downloads")
model=stan_model("randomeffect.stan")
library(rstan)
model=stan_model("randomeffect.stan")
dataran$X=dataran$z
View(dataran)
roxygen2::roxygenize()
setwd("~/Downloads/BayesianPlatformDesignTimeTrend")
setwd("~/Downloads/BayesianPlatformDesignTimeTrend")
roxygen2::roxygenize()
library(BayesianPlatformDesignTimeTrend)
View(stan.logisticmodeltrans)
force(Meanfunc)
stan_model()
remove.packages("PlatFormDesignTimeTrend")
remove.packages("BayesianPlatformDesignTimeTrend")
roxygen2::roxygenize()
roxygen2::roxygenize()
devtools::document()
roxygen2::roxygenize()
install.packages("rstantools")
install.packages("rstantools")
library(rstantools)
rstantools::rstan_create_package("/Downloads","temppackage")
rstantools::rstan_create_package("Downloads","temppackage")
setwd("~/Downloads")
rstantools::rstan_create_package("temppackage")
setwd("~/Downloads/BayesianPlatformDesignTimeTrend")
roxygen2::roxygenize()
library(rstantools)
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
library(plotly)
plotfun=function(temp=temp,title=title){
data=matrix(rep(NA,126),ncol=2)
indexi=1
indexj=1
for (i in seq(130,90,-5)){
for (j in seq(40,10,-5)){
data[indexi,1]=i
data[indexj,2]=j
indexj=indexj+1
indexi=indexi+1
}
}
data=cbind(data,colMeans(temp)[1:63])
data=cbind(data,colMeans(temp)[64:126])
colnames(data)=c("Nnew","Cohort","t1E0","t1Eadd")
data=as.data.frame(data)
m11=matrix(rep(NA,63),ncol=7)
m111=m11
m1111=m11
m11111=m11
m111111=m11
index=1
for (i in 1:9) {
for (j in 1:7){
m11[i,j]=data$t1E0[index]
index=index+1
}
}
index=1
for (i in 1:9) {
for (j in 1:7){
m111[i,j]=data$t1Eadd[index]
index=index+1
}
}
data1=list(Nnew=seq(130,90,-5),Cohort=seq(40,10,-5),t1E0=m11,t1Eadd=m111)
# figexsistingarm <- plot_ly(y = data1$Nnew, x = data1$Cohort, z = data1$t1E0) %>% add_surface()
figexsistingarm=plot_ly(y = data1$Nnew, x = data1$Cohort, z = data1$t1E0,type="contour",autocontour=TRUE,
contours = list(
end = 0.05,
size = 0.01,
start = 0
))
figexsistingarm=figexsistingarm
# figaddarm <- plot_ly(y = data1$Nnew, x = data1$Cohort, z = data1$t1Eadd) %>% add_surface()
figaddarm=plot_ly(y = data1$Nnew, x = data1$Cohort, z = data1$t1Eadd,type="contour",autocontour=TRUE,
contours = list(
end = 0.1,
size = 0.02,
start = 0
))
figaddarm=figaddarm
return(list(figexsistingarm=figexsistingarm,figaddarm=figaddarm))
}
load("~/Downloads/temp2.RData")
p1=plotfun(temp)
ex1=p1$figexsistingarm
ad1=p1$figaddarm
fwer={}
for (i in 1:49){
fwer=c(fwer, mean(colSums(rbind(temp[,i],temp[,i+49]))>0))
}
fwer
load("~/Downloads/temp3.RData")
p2=plotfun(temp)
ex2=p2$figexsistingarm
ad2=p2$figaddarm
fwer={}
for (i in 1:49){
fwer=c(fwer, mean(colSums(rbind(temp[,i],temp[,i+49]))>0))
}
fwer
load("~/Downloads/temp4.RData")
p3=plotfun(temp)
ex3=p3$figexsistingarm
ad3=p3$figaddarm
fwer={}
for (i in 1:49){
fwer=c(fwer, mean(colSums(rbind(temp[,i],temp[,i+49]))>0))
}
fwer
load("~/Downloads/temp5.RData")
p4=plotfun(temp)
ex4=p4$figexsistingarm
ad4=p4$figaddarm
# library(ggpubr)
# subplot(ex1,ex2,ex3,ex4,nrows=2)
# subplot(ad1,ad2,ad3,ad4,nrows=2)
fwer={}
for (i in 1:49){
fwer=c(fwer, mean(colSums(rbind(temp[,i],temp[,i+49]))>0))
}
fwer
subplot(ex1,ex2,ex3,ex4,nrows=2)
subplot(ad1,ad2,ad3,ad4,nrows=2)
load("~/Downloads/temp2.RData")
data=matrix(rep(NA,126),ncol=2)
indexi=1
indexj=1
for (i in seq(130,90,-5)){
for (j in seq(40,10,-5)){
data[indexi,1]=i
data[indexj,2]=j
indexj=indexj+1
indexi=indexi+1
}
}
data=cbind(data,colMeans(temp)[1:63])
data=cbind(data,colMeans(temp)[64:126])
colnames(data)=c("Nnew","Cohort","t1E0","t1Eadd")
data=as.data.frame(data)
m11=matrix(rep(NA,63),ncol=7)
m111=m11
m1111=m11
m11111=m11
m111111=m11
index=1
for (i in 1:9) {
for (j in 1:7){
m11[i,j]=data$t1E0[index]
index=index+1
}
}
index=1
for (i in 1:9) {
for (j in 1:7){
m111[i,j]=data$t1Eadd[index]
index=index+1
}
}
data1=list(Nnew=seq(130,90,-5),Cohort=seq(40,10,-5),t1E0=m11,t1Eadd=m111)
plot_ly(y = data1$Nnew, x = data1$Cohort, z = data1$t1Eadd) %>% add_surface()
load("~/Downloads/temp3.RData")
data=matrix(rep(NA,126),ncol=2)
indexi=1
indexj=1
for (i in seq(130,90,-5)){
for (j in seq(40,10,-5)){
data[indexi,1]=i
data[indexj,2]=j
indexj=indexj+1
indexi=indexi+1
}
}
data=cbind(data,colMeans(temp)[1:63])
data=cbind(data,colMeans(temp)[64:126])
colnames(data)=c("Nnew","Cohort","t1E0","t1Eadd")
data=as.data.frame(data)
m11=matrix(rep(NA,63),ncol=7)
m111=m11
m1111=m11
m11111=m11
m111111=m11
index=1
for (i in 1:9) {
for (j in 1:7){
m11[i,j]=data$t1E0[index]
index=index+1
}
}
index=1
for (i in 1:9) {
for (j in 1:7){
m111[i,j]=data$t1Eadd[index]
index=index+1
}
}
data1=list(Nnew=seq(130,90,-5),Cohort=seq(40,10,-5),t1E0=m11,t1Eadd=m111)
plot_ly(y = data1$Nnew, x = data1$Cohort, z = data1$t1Eadd) %>% add_surface()
load("~/Downloads/temp4.RData")
data=matrix(rep(NA,126),ncol=2)
indexi=1
indexj=1
for (i in seq(130,90,-5)){
for (j in seq(40,10,-5)){
data[indexi,1]=i
data[indexj,2]=j
indexj=indexj+1
indexi=indexi+1
}
}
data=cbind(data,colMeans(temp)[1:63])
data=cbind(data,colMeans(temp)[64:126])
colnames(data)=c("Nnew","Cohort","t1E0","t1Eadd")
data=as.data.frame(data)
m11=matrix(rep(NA,63),ncol=7)
m111=m11
m1111=m11
m11111=m11
m111111=m11
index=1
for (i in 1:9) {
for (j in 1:7){
m11[i,j]=data$t1E0[index]
index=index+1
}
}
index=1
for (i in 1:9) {
for (j in 1:7){
m111[i,j]=data$t1Eadd[index]
index=index+1
}
}
data1=list(Nnew=seq(130,90,-5),Cohort=seq(40,10,-5),t1E0=m11,t1Eadd=m111)
plot_ly(y = data1$Nnew, x = data1$Cohort, z = data1$t1Eadd) %>% add_surface()
load("~/Downloads/temp5.RData")
data=matrix(rep(NA,126),ncol=2)
indexi=1
indexj=1
for (i in seq(130,90,-5)){
for (j in seq(40,10,-5)){
data[indexi,1]=i
data[indexj,2]=j
indexj=indexj+1
indexi=indexi+1
}
}
data=cbind(data,colMeans(temp)[1:63])
data=cbind(data,colMeans(temp)[64:126])
colnames(data)=c("Nnew","Cohort","t1E0","t1Eadd")
data=as.data.frame(data)
m11=matrix(rep(NA,63),ncol=7)
m111=m11
m1111=m11
m11111=m11
m111111=m11
index=1
for (i in 1:9) {
for (j in 1:7){
m11[i,j]=data$t1E0[index]
index=index+1
}
}
index=1
for (i in 1:9) {
for (j in 1:7){
m111[i,j]=data$t1Eadd[index]
index=index+1
}
}
data1=list(Nnew=seq(130,90,-5),Cohort=seq(40,10,-5),t1E0=m11,t1Eadd=m111)
plot_ly(y = data1$Nnew, x = data1$Cohort, z = data1$t1Eadd) %>% add_surface()
plot_ly(y = data1$Nnew, x = data1$Cohort, z = data1$t1E0) %>% add_surface()
View(data1)
View(ex3)
View(ex1)
View(p1)
library(usethis)
usethis::use_cran_comments(open=rlang::is_interactive())
?message
options()
old <- options()# code line i
on.exit(options(old)) # code line i+1
registerDoParallel(cores = 2)
options()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
)) {
Randomisation.inf = function(Random.inf = list(
Fixratio = FALSE,
Fixratiocontrol = NA,
BARmethod = "Thall",
Thall.tuning.inf = list(tuningparameter = "Fixed",  fixvalue = 1)
)) {
Fixratio = Random.inf$Fixratio
if (Fixratio == T) {
if (is.na(Random.inf$Fixratiocontrol) |
Random.inf$Fixratiocontrol <= 0) {
stop(
"Error: The value R > 0 for fix randomisation (R:1:1:1:......) should be input which is Fixratiocontrol"
)
}
else{
Fixratiocontrol = Random.inf$Fixratiocontrol
}
return(
list(
Fixratio = Fixratio,
Fixratiocontrol = Fixratiocontrol,
BARmethod = NA,
Thall.tuning.inf = list(tuningparameter = NA,  c = NA)
)
)
}
else {
BARmethod = Random.inf$BARmethod
if (BARmethod == "Thall") {
tuning.inf = Random.inf$Thall.tuning.inf$tuningparameter
if (tuning.inf == "Fixed") {
tuningparameter = "Fixed"
c = Random.inf$Thall.tuning.inf$fixvalue
if (is.na(Random.inf$Thall.tuning.inf$fixvalue)) {
stop("Error: The value of tuning parameter in Thall's approach should be specified.")
}
return(
list(
BARmethod = BARmethod,
Thall.tuning.inf = list(tuningparameter = tuningparameter, c = c),
Fixratio = Fixratio,
Fixratiocontrol = NA
)
)
}
else {
tuningparameter = "Unfixed"
}
return(
list(
BARmethod = BARmethod,
Thall.tuning.inf = list(tuningparameter = tuningparameter,  c = NA),
Fixratio = Fixratio,
Fixratiocontrol = NA
)
)
}
else{
BARmethod = "Trippa"
return(
list(
BARmethod = BARmethod,
Thall.tuning.inf = list(tuningparameter = NA,  c = NA),
Fixratio = Fixratio,
Fixratiocontrol = NA
)
)
}
}
}
Randomisation.inf(Random.inf = list(
Fixratio = FALSE,
Fixratiocontrol = NA,
BARmethod = "Thall",
Thall.tuning.inf = list(tuningparameter = "Fixed",  fixvalue = 1)
)
Randomisation.inf(Random.inf = list(
Fixratio = FALSE,
Fixratiocontrol = NA,
BARmethod = "Thall",
Thall.tuning.inf = list(tuningparameter = "Fixed",  fixvalue = 1)
))
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
library(BayesianPlatformDesignTimeTrend)
Trial.simulation(ntrials = 2, cl = 2)
Trial.simulation(ntrials = 2, cl = 2)
Trial.simulation(ntrials = 2, cl = 2)
Trial.simulation(ntrials = 2, cl = 2)
demo_multscenario(ntrials = 2, cl = 2, save_data = FALSE)
debug
debug(demo_multscenario)
demo_multscenario(ntrials = 2, cl = 2, save_data = FALSE)
roxygen2::roxygenize()
remove.packages("BayesianPlatformDesignTimeTrend")
roxygen2::roxygenize()
roxygen2::roxygenize()
?geDesign
install.packages("gsDesign")
library(gsDesign)
?gsDesign
x <- gsDesign(k = 5, test.type = 2, n.fix = 800)
x
x <- gsDesign(k = 5, test.type = 2, n.fix = 800, sfu= "Pocock")
x
Timetrend.fun = function(trend.inf) {
# Time trend pattern function
trend.type = trend.inf$trend.type
trend.effect = trend.inf$trend.effect
trend_add_or_multip = trend.inf$trend_add_or_multip
switch(trend.type,
"step" = {
if(sum(trend.effect != 0) > 0) {
trend.function = function(ns, group , i, trend.effect) {
delta = (group - 1) * trend.effect
return(delta)
}
timetrendornot = c("There is time trend during data generation")
}
},
"linear" = {
if(sum(trend.effect != 0) > 0) {
trend.function = function(ns, group , i, trend.effect) {
delta = (i - 1 + ns[group] - ns[1]) * trend.effect /  (ns[length(ns)] - 1)
return(delta)
}
timetrendornot = c("There is time trend during data generation")
}
},
"inverse.U.linear" = {
if(sum(trend.effect != 0) > 0) {
trend.function = function(ns, group , i, trend.effect) {
delta = ifelse(
group <= round(length(ns) / 2),
(i - 1 + ns[group] - ns[1]) * trend.effect /  (ns[length(ns)] - 1),
(ns[1] - 1 + ns[round(length(ns) / 2)] - ns[1]) * trend.effect /  (ns[length(ns)] - 1) - (i - 1 + ns[group - round(length(ns) / 2)] - ns[1]) * trend.effect /  (ns[length(ns)] - 1)
)
return(delta)
}
timetrendornot = c("There is time trend during data generation")
}
},
"plateau" = {
if(sum(trend.effect != 0) > 0) {
trend.function = function(ns, group , i, trend.effect) {
delta = trend.effect * (i - 1 + ns[group] - ns[1]) / (max(ns) / 10 + (i - 1 + ns[group] - ns[1]))
return(delta)
}
timetrendornot = c("There is time trend during data generation")
}
},
stop("Error: Wrong trend type or strength of time effect for data generation")
)
if(sum(trend.effect != 0) == 0) {
trend.function = function(ns, group, i, trend.effect) {
delta = 0
return(delta)
}
timetrendornot = c("There is no time trend during data generation")
}
return(
list(
trend.function = trend.function,
timetrendornot = timetrendornot,
trend_add_or_multip = trend_add_or_multip,
trend.effect = trend.effect
)
)
}
Timetrend.fun(trend.inf = list(
trend.type = "step",
trend.effect = c(0, 0),
trend_add_or_multip = "mult"
))
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
usethis::use_mit_license()
use_mit_license(copyright_holder = NULL)
roxygen2::roxygenize()
