2.323, 2.573, 0, 2.715,
3.118, 3.453, 2.715, 0),
nrow = 4,
ncol = 4,
dimnames = list(c("ETX", "Mpp51Aa1", "Bt-0409", "Bt-0429"),
c("ETX", "Mpp51Aa1", "Bt-0409", "Bt-0429")))
# Plot the heatmap with diagonal line
heatmap(data,
scale = "none", # no scaling
Colv = NA, # turn off column dendrogram
Rowv = NA, # turn off row dendrogram
col = colorRampPalette(c("white", "red"))(50), # choose a red color scheme
main = "Heatmap Example",
add.expr = {abline(a = 0, b = 1, col = "green", lwd = 2)})
# Plot the heatmap with diagonal line
heatmap(data,
scale = "none", # no scaling
Colv = NA, # turn off column dendrogram
Rowv = NA, # turn off row dendrogram
col = colorRampPalette(c("white", "red"))(50), # choose a red color scheme
main = "Heatmap Example",
diag=T)
# Plot the heatmap with diagonal line
heatmap(data,
scale = "none", # no scaling
Colv = NA, # turn off column dendrogram
Rowv = NA, # turn off row dendrogram
col = colorRampPalette(c("white", "red"))(50), # choose a red color scheme
main = "Heatmap Example",
diag=TRUE)
library(BayesianPlatformDesignTimeTrend)
output=Trial.simulation(ntrials = 1000,cl=2)
View(output)
output[["OPC"]]
output=Trial.simulation(ntrials = 1000,cl=2,input.info = list(
response.probs = c(0.4, 0.4),
ns = c(30, 60, 90, 120, 150),
max.ar = 0.75,
rand.algo = "Urn",
max.deviation = 3,
model.inf = list(
model = "tlr",
ibb.inf = list(
pi.star = 0.5,
pess = 2,
betabinomialmodel = ibetabinomial.post
),
tlr.inf = list(
beta0_prior_mu = 0,
beta1_prior_mu = 0,
beta0_prior_sigma = 2.5,
beta1_prior_sigma = 2.5,
beta0_df = 7,
beta1_df = 7,
reg.inf =  "main",
variable.inf = "Fixeffect"
)
),
Stopbound.inf = Stopboundinf(
Stop.type = "Early-Pocock",
Boundary.type = "Symmetric",
cutoff = c(0.9925, 0.0075)
),
Random.inf = list(
Fixratio = FALSE,
Fixratiocontrol = NA,
BARmethod = "Thall",
Thall.tuning.inf = list(tuningparameter = "Fixed",  fixvalue = 1)
),
trend.inf = list(
trend.type = "step",
trend.effect = c(0, 0),
trend_add_or_multip = "mult"
)
))
View(output)
output[["OPC"]]
output=Trial.simulation(ntrials = 1000,cl=2,input.info = list(
response.probs = c(0.4, 0.4),
ns = c(30, 60, 90, 120, 150),
max.ar = 0.75,
rand.algo = "Urn",
max.deviation = 3,
model.inf = list(
model = "tlr",
ibb.inf = list(
pi.star = 0.5,
pess = 2,
betabinomialmodel = ibetabinomial.post
),
tlr.inf = list(
beta0_prior_mu = 0,
beta1_prior_mu = 0,
beta0_prior_sigma = 2.5,
beta1_prior_sigma = 2.5,
beta0_df = 7,
beta1_df = 7,
reg.inf =  "main",
variable.inf = "Fixeffect"
)
),
Stopbound.inf = Stopboundinf(
Stop.type = "Early-Pocock",
Boundary.type = "Symmetric",
cutoff = c(0.993, 0.007)
),
Random.inf = list(
Fixratio = FALSE,
Fixratiocontrol = NA,
BARmethod = "Thall",
Thall.tuning.inf = list(tuningparameter = "Fixed",  fixvalue = 1)
),
trend.inf = list(
trend.type = "step",
trend.effect = c(0, 0),
trend_add_or_multip = "mult"
)
))
View(output)
output[["OPC"]]
output=Trial.simulation(ntrials = 10000,cl=2,input.info = list(
response.probs = c(0.4, 0.4),
ns = c(30, 60, 90, 120, 150),
max.ar = 0.75,
rand.algo = "Urn",
max.deviation = 3,
model.inf = list(
model = "tlr",
ibb.inf = list(
pi.star = 0.5,
pess = 2,
betabinomialmodel = ibetabinomial.post
),
tlr.inf = list(
beta0_prior_mu = 0,
beta1_prior_mu = 0,
beta0_prior_sigma = 2.5,
beta1_prior_sigma = 2.5,
beta0_df = 7,
beta1_df = 7,
reg.inf =  "main",
variable.inf = "Fixeffect"
)
),
Stopbound.inf = Stopboundinf(
Stop.type = "Early-Pocock",
Boundary.type = "Symmetric",
cutoff = c(0.993, 0.007)
),
Random.inf = list(
Fixratio = FALSE,
Fixratiocontrol = NA,
BARmethod = "Thall",
Thall.tuning.inf = list(tuningparameter = "Fixed",  fixvalue = 1)
),
trend.inf = list(
trend.type = "step",
trend.effect = c(0, 0),
trend_add_or_multip = "mult"
)
))
View(output)
output[["OPC"]]
output=Trial.simulation(ntrials = 10000,cl=2,input.info = list(
response.probs = c(0.4, 0.4),
ns = c(30, 60, 90, 120, 150)*2,
max.ar = 0.75,
rand.algo = "Urn",
max.deviation = 3,
model.inf = list(
model = "tlr",
ibb.inf = list(
pi.star = 0.5,
pess = 2,
betabinomialmodel = ibetabinomial.post
),
tlr.inf = list(
beta0_prior_mu = 0,
beta1_prior_mu = 0,
beta0_prior_sigma = 2.5,
beta1_prior_sigma = 2.5,
beta0_df = 7,
beta1_df = 7,
reg.inf =  "main",
variable.inf = "Fixeffect"
)
),
Stopbound.inf = Stopboundinf(
Stop.type = "Early-Pocock",
Boundary.type = "Symmetric",
cutoff = c(0.993, 0.007)
),
Random.inf = list(
Fixratio = FALSE,
Fixratiocontrol = NA,
BARmethod = "Thall",
Thall.tuning.inf = list(tuningparameter = "Fixed",  fixvalue = 1)
),
trend.inf = list(
trend.type = "step",
trend.effect = c(0, 0),
trend_add_or_multip = "mult"
)
))
View(output)
output=Trial.simulation(ntrials = 10000,cl=2,input.info = list(
response.probs = c(0.4, 0.4),
ns = c(30, 60, 90, 120, 150)*2,
max.ar = 0.75,
rand.algo = "Urn",
max.deviation = 3,
model.inf = list(
model = "tlr",
ibb.inf = list(
pi.star = 0.5,
pess = 2,
betabinomialmodel = ibetabinomial.post
),
tlr.inf = list(
beta0_prior_mu = 0,
beta1_prior_mu = 0,
beta0_prior_sigma = 2.5,
beta1_prior_sigma = 2.5,
beta0_df = 7,
beta1_df = 7,
reg.inf =  "main",
variable.inf = "Fixeffect"
)
),
Stopbound.inf = Stopboundinf(
Stop.type = "Early-Pocock",
Boundary.type = "Symmetric",
cutoff = c(0.993, 0.007)
),
Random.inf = list(
Fixratio = FALSE,
Fixratiocontrol = NA,
BARmethod = "Thall",
Thall.tuning.inf = list(tuningparameter = "Fixed",  fixvalue = 1)
),
trend.inf = list(
trend.type = "step",
trend.effect = c(0, 0),
trend_add_or_multip = "mult"
)
))
View(output)
output[["OPC"]]
OPC_Trial.simulation=output$OPC
load("~/Downloads/BayesianPlatformDesignTimeTrend/data-raw/TABLEEARLYcstagealtARTHALL.RData")
View(OPC)
save(OPC_Trial.simulation,file = "TABLEOPC_Trial.simulationforreadme")
save(OPC_Trial.simulation,file = "TABLEOPC_Trial.simulationforreadme.RData")
load("~/Downloads/BayesianPlatformDesignTimeTrend/data-raw/TABLEOPC_Trial.simulationforreadme.RData")
usethis::use_data(dataloginformd, recommandloginformd, predictedtpIEinformd, OPC_null, OPC_alt,OPC_Trial.simulation, overwrite = TRUE)
## code to prepare `dataforvignette` dataset goes here
load("data-raw/notrend_screening600_s5_fourarm04_ARratiothall_earlystop.RData")
dataloginformd=cutoff.information$dataloginformd
recommandloginformd=cutoff.information$recommandloginformd
predictedtpIEinformd=cutoff.information$predictedtpIEinformd
load("data-raw/TABLEEARLYcstagenullARTHALL.RData")
OPC_null = OPC
load("data-raw/TABLEEARLYcstagealtARTHALL.RData")
OPC_alt = OPC
load("data-raw/DATAEARLYcstagenullARTHALL.RData")
DATA_null = result
load("data-raw/DATAEARLYcstagealtARTHALL.RData")
DATA_alt = result
load("data-raw/TABLEOPC_Trial.simulationforreadme.RData")
OPC_Trial.simulation=OPC_Trial.simulation
usethis::use_data(dataloginformd, recommandloginformd, predictedtpIEinformd, OPC_null, OPC_alt,OPC_Trial.simulation, overwrite = TRUE)
View(OPC_Trial.simulation)
View(OPC_alt)
View(OPC_Trial.simulation)
View(OPC)
DATA_Trial.simulation=output$result
save(DATA_Trial.simulation,file="DATA_Trial.simulation.RData")
load("~/Downloads/BayesianPlatformDesignTimeTrend/data-raw/DATA_Trial.simulation.RData")
## code to prepare `dataforvignette` dataset goes here
load("data-raw/notrend_screening600_s5_fourarm04_ARratiothall_earlystop.RData")
dataloginformd=cutoff.information$dataloginformd
recommandloginformd=cutoff.information$recommandloginformd
predictedtpIEinformd=cutoff.information$predictedtpIEinformd
load("data-raw/TABLEEARLYcstagenullARTHALL.RData")
OPC_null = OPC
load("data-raw/TABLEEARLYcstagealtARTHALL.RData")
OPC_alt = OPC
load("data-raw/DATAEARLYcstagenullARTHALL.RData")
DATA_null = result
load("data-raw/DATAEARLYcstagealtARTHALL.RData")
DATA_alt = result
load("data-raw/TABLEOPC_Trial.simulationforreadme.RData")
OPC_Trial.simulation=OPC_Trial.simulation
load("data-raw/DATA_Trial.simulation.RData")
DATA_Trial.simulation=DATA_Trial.simulation
usethis::use_data(dataloginformd, recommandloginformd, predictedtpIEinformd,
OPC_null, OPC_alt,OPC_Trial.simulation,
DATA_Trial.simulation, overwrite = TRUE)
sinew::makeOxygen(DATA_Trial.simulation,add_fields = "source")
load("~/Downloads/BayesianPlatformDesignTimeTrend/data-raw/DATAEARLYcstagealtARTHALL.RData")
View(DATA_null)
sinew::makeOxygen(DATA_null,add_fields = "source")
sinew::makeOxygen(DATA_null)
use_readme_md()
output=Trial.simulation (ntrials = 1000,
trial.fun = simulatetrial,
input.info = list(
response.probs = c(0.4, 0.4),
ns = c(60, 120, 180, 240, 300),
max.ar = 0.75,
rand.type = "Urn",
max.deviation = 3,
model.inf = list(
model = "tlr",
ibb.inf = list(
pi.star = 0.5,
pess = 2,
betabinomialmodel = ibetabinomial.post
),
tlr.inf = list(
beta0_prior_mu = 0,
beta1_prior_mu = 0,
beta0_prior_sigma = 2.5,
beta1_prior_sigma = 2.5,
beta0_df = 7,
beta1_df = 7,
reg.inf =  "main",
variable.inf = "Fixeffect"
)
),
Stopbound.inf = Stopboundinf(
Stop.type = "Early-Pocock",
Boundary.type = "Symmetric",
cutoff = c(0.9925, 0.0075)
),
Random.inf = list(
Fixratio = FALSE,
Fixratiocontrol = NA,
BARmethod = "Thall",
Thall.tuning.inf = list(tuningparameter = "Fixed",  fixvalue = 1)
),
trend.inf = list(
trend.type = "step",
trend.effect = c(0, 0),
trend_add_or_multip = "mult"
)
),
cl = 2)
Trial.simulation
debug(Trial.simulation)
output=Trial.simulation(ntrials = 1000,
trial.fun = simulatetrial,
input.info = list(
response.probs = c(0.4, 0.4),
ns = c(60, 120, 180, 240, 300),
max.ar = 0.75,
rand.type = "Urn",
max.deviation = 3,
model.inf = list(
model = "tlr",
ibb.inf = list(
pi.star = 0.5,
pess = 2,
betabinomialmodel = ibetabinomial.post
),
tlr.inf = list(
beta0_prior_mu = 0,
beta1_prior_mu = 0,
beta0_prior_sigma = 2.5,
beta1_prior_sigma = 2.5,
beta0_df = 7,
beta1_df = 7,
reg.inf =  "main",
variable.inf = "Fixeffect"
)
),
Stopbound.inf = Stopboundinf(
Stop.type = "Early-Pocock",
Boundary.type = "Symmetric",
cutoff = c(0.9925, 0.0075)
),
Random.inf = list(
Fixratio = FALSE,
Fixratiocontrol = NA,
BARmethod = "Thall",
Thall.tuning.inf = list(tuningparameter = "Fixed",  fixvalue = 1)
),
trend.inf = list(
trend.type = "step",
trend.effect = c(0, 0),
trend_add_or_multip = "mult"
)
),
cl = 2)
debug(trial.fun)
debug(simulatetrial)
output=Trial.simulation(ntrials = 1000,
trial.fun = simulatetrial,
input.info = list(
response.probs = c(0.4, 0.4),
ns = c(60, 120, 180, 240, 300),
max.ar = 0.75,
rand.type = "Urn",
max.deviation = 3,
model.inf = list(
model = "tlr",
ibb.inf = list(
pi.star = 0.5,
pess = 2,
betabinomialmodel = ibetabinomial.post
),
tlr.inf = list(
beta0_prior_mu = 0,
beta1_prior_mu = 0,
beta0_prior_sigma = 2.5,
beta1_prior_sigma = 2.5,
beta0_df = 7,
beta1_df = 7,
reg.inf =  "main",
variable.inf = "Fixeffect"
)
),
Stopbound.inf = Stopboundinf(
Stop.type = "Early-Pocock",
Boundary.type = "Symmetric",
cutoff = c(0.9925, 0.0075)
),
Random.inf = list(
Fixratio = FALSE,
Fixratiocontrol = NA,
BARmethod = "Thall",
Thall.tuning.inf = list(tuningparameter = "Fixed",  fixvalue = 1)
),
trend.inf = list(
trend.type = "step",
trend.effect = c(0, 0),
trend_add_or_multip = "mult"
)
),
cl = 2)
trial.fun(
response.probs = input.info$response.probs,
ns = input.info$ns,
max.ar = input.info$max.ar,
rand.algo = input.info$rand.algo,
max.deviation = input.info$max.deviation,
model.inf = input.info$model.inf,
Stopbound.inf = input.info$Stopbound.inf,
Random.inf = input.info$Random.inf,
trend.inf = input.info$trend.inf
)
trial.fun(
response.probs = input.info$response.probs,
ns = input.info$ns,
max.ar = input.info$max.ar,
rand.algo = input.info$rand.algo,
max.deviation = input.info$max.deviation,
model.inf = input.info$model.inf,
Stopbound.inf = input.info$Stopbound.inf,
Random.inf = input.info$Random.inf,
trend.inf = input.info$trend.inf
)
rand.algo %in% c("Coin", "Urn")
rand.algo
output=Trial.simulation(ntrials = 1000,
trial.fun = simulatetrial,
input.info = list(
response.probs = c(0.4, 0.4),
ns = c(60, 120, 180, 240, 300),
max.ar = 0.75,
rand.algo = "Urn",
max.deviation = 3,
model.inf = list(
model = "tlr",
ibb.inf = list(
pi.star = 0.5,
pess = 2,
betabinomialmodel = ibetabinomial.post
),
tlr.inf = list(
beta0_prior_mu = 0,
beta1_prior_mu = 0,
beta0_prior_sigma = 2.5,
beta1_prior_sigma = 2.5,
beta0_df = 7,
beta1_df = 7,
reg.inf =  "main",
variable.inf = "Fixeffect"
)
),
Stopbound.inf = Stopboundinf(
Stop.type = "Early-Pocock",
Boundary.type = "Symmetric",
cutoff = c(0.9925, 0.0075)
),
Random.inf = list(
Fixratio = FALSE,
Fixratiocontrol = NA,
BARmethod = "Thall",
Thall.tuning.inf = list(tuningparameter = "Fixed",  fixvalue = 1)
),
trend.inf = list(
trend.type = "step",
trend.effect = c(0, 0),
trend_add_or_multip = "mult"
)
),
cl = 2)
roxygen2::roxygenize()
remove.packages("BayesianPlatformDesignTimeTrend")
roxygen2::roxygenize()
roxygen2::roxygenise()
